plugins {
    // Apply the application plugin to add support for building a Java application
    id 'application'
}

// Configure Java toolchain
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) 
    }
}

application{
    mainClass = 'basic_demo.App'
}

description = "A trivial Gradle build"
version = "0.1.0"

repositories {
    mavenCentral()
}

dependencies {
    // Use Apache Log4J for logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

test {
    useJUnitPlatform()
}
 
jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    manifest {
        attributes "Main-Class": "basic_demo.App"
    }

   from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}



task runClient(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001 "
  
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatClientApp'

    args '192.168.244.1', '59001'
}

task backup(type: Copy) {
    group = "COGSI"
    description = "Copies the src directory to a backup directory"

    from 'src'
    into 'backup'
}

// Issue 27 - zipBackup task creates a zip from the backup directory ensuring backup runs first
task zipBackup(type: Zip) {
    group = "DevOps"
    description = "Creates a zip archive of the backup directory (depends on backup)"

    dependsOn backup

    from 'backup'
    archiveFileName = 'backup.zip'
    destinationDirectory = file('.')
}

// Issue 28 - Helper task to print resolved Java toolchain details (for documentation)
tasks.register('javaToolchain') {
    group = "Help"
    description = "Prints information about the configured Java toolchain"
    doLast {
        println "Java Toolchain (languageVersion): ${java.toolchain.languageVersion.get()}"
        println "Current JVM version: ${System.getProperty('java.version')}"
        println "Gradle version: ${gradle.gradleVersion} (Wrapper governs this)"
        println "JAVA_HOME: ${System.getenv('JAVA_HOME')}"
    }
}

task runServer(type:JavaExec){
    group = "COGSI"

    description = "Task that starts the Chat App"
  
    dependsOn build

    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatServerApp'

    args '59001'
}

    task testChatClient(type: Test) {
        group = "COGSI"                          
        description = "Executa apenas o teste da classe ChatClient"
        dependsOn build                          
        useJUnitPlatform()                       
        testClassesDirs = sourceSets.test.output.classesDirs  
    
        classpath = sourceSets.test.runtimeClasspath          
        include '**/ChatClientTest.class'        
    }

// Issue #32 - deployToDev: cleans build/deployment/dev and prepares artifacts for a dev deployment
def devDeployDir = "$buildDir/deployment/dev"

tasks.register('cleanDevDeploy', Delete) {
    group = 'DevOps'
    description = 'Cleans the build/deployment/dev directory'
    delete devDeployDir
}

tasks.register('copyAppArtifact', Copy) {
    group = 'DevOps'
    description = 'Copies the main application artifact (JAR) to build/deployment/dev'
    dependsOn tasks.named('jar')
    mustRunAfter 'cleanDevDeploy'
    from(tasks.named('jar').flatMap { it.archiveFile })
    into devDeployDir
}

tasks.register('copyRuntimeLibs', Copy) {
    group = 'DevOps'
    description = 'Copies only runtime dependency JARs to build/deployment/dev/lib'
    mustRunAfter 'cleanDevDeploy'
    from({ configurations.runtimeClasspath.filter { it.name.endsWith('.jar') } })
    into "$devDeployDir/lib"
}

tasks.register('copyConfigWithTokens', Copy) {
    group = 'DevOps'
    description = 'Copies .properties to build/deployment/dev with ReplaceTokens (projectVersion, buildTimestamp)'
    mustRunAfter 'cleanDevDeploy'
    // Build timestamp in ISO-8601-like format
    def ts = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(new Date())
    from('src/main/resources') {
        include '*.properties'
        // Use Ant ReplaceTokens; tokens are referenced in files like @projectVersion@, @buildTimestamp@
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [projectVersion: project.version.toString(), buildTimestamp: ts])
    }
    into devDeployDir
}

tasks.register('deployToDev') {
    group = 'DevOps'
    description = 'Cleans build/deployment/dev and copies app jar, runtime libs, and token-filtered configs'
    dependsOn 'cleanDevDeploy', 'copyAppArtifact', 'copyRuntimeLibs', 'copyConfigWithTokens'
}
