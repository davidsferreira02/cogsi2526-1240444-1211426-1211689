<project name="payroll-ant" default="jar" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- ===== Load Ivy (ant-lib/ivy-*.jar) ===== -->
    <path id="ivy.classpath">
        <fileset dir="ant-lib" includes="ivy-*.jar" erroronmissingdir="false" />
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
        uri="antlib:org.apache.ivy.ant"
        classpathref="ivy.classpath" />

    <property file="build.properties"/>

    <!-- 2. Classpath Definition -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>

    <path id="test.compile.classpath">
        <pathelement location="${classes.dir}"/>
        <path refid="compile.classpath"/>
    </path>

    <path id="test.runtime.classpath">
        <pathelement location="${test.classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <path refid="compile.classpath"/>
    </path>

    <path id="integrationTest.runtime.classpath">
        <pathelement location="${integrationTest.classes.dir}"/>
        <pathelement location="${classes.dir}"/>
        <path refid="compile.classpath"/>
    </path>

    <!-- Target to resolve dependencies -->
    <target name="resolve" description="--> Resolves project dependencies with Ivy">
        <ivy:retrieve conf="default,test"
                      pattern="${lib.dir}/[type]s/[artifact]-[revision](-[classifier]).[ext]"/>
    </target>

    <!-- Target to clean the project -->
    <target name="clean" description="--> Cleans the build directories">
        <delete dir="${build.dir}" />
        <delete dir="${lib.dir}" />
    </target>

    <!-- Target to create the necessary directories -->
    <target name="init" description="--> Creates the build directory structure">
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${lib.dir}" />
    </target>

    <!-- Target to compile the source code -->
    <target name="compile" depends="init, resolve" description="--> Compiles the Java source code">
        <javac srcdir="${src.dir}"
            destdir="${build.classes.dir}"
            classpathref="compile.classpath"
            includeantruntime="false"
            source="${java.source.version}"
            target="${java.target.version}" />
        <!-- Copies resources (e.g., application.properties) to the classes folder -->
        <copy todir="${build.classes.dir}" failonerror="false">
            <fileset dir="${resources.dir}" erroronmissingdir="false" />
        </copy>
    </target>

    <target name="test-prepare" depends="compile">
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${test.reports.dir}"/>
        <copy todir="${test.classes.dir}" failonerror="false">
            <fileset dir="${test.resources.dir}" erroronmissingdir="false"/>
        </copy>
    </target>

    <target name="test-compile" depends="test-prepare" description="Compile test sources">
        <javac srcdir="${test.src.dir}"
               destdir="${test.classes.dir}"
               includeantruntime="false"
               release="${java.source.version}"
               encoding="${encoding}">
            <classpath refid="test.compile.classpath"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <target name="integrationTest-prepare" depends="compile">
        <mkdir dir="${integrationTest.classes.dir}"/>
        <mkdir dir="${integrationTest.reports.dir}"/>
    
        <copy todir="${integrationTest.classes.dir}" failonerror="false">
            <fileset dir="${integrationTest.resources.dir}" erroronmissingdir="false"/>
        </copy>
    </target>


    <target name="integrationTest-compile" depends="integrationTest-prepare" description="Compile test sources">
        <javac srcdir="${integrationTest.src.dir}"
               destdir="${integrationTest.classes.dir}"
               includeantruntime="false"
               release="${java.source.version}"
               encoding="${encoding}">
            <classpath refid="test.compile.classpath"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>



    <!-- Target to create the JAR file -->
    <target name="jar" depends="compile" description="--> Creates the executable JAR file">
        <jar destfile="${jar.file}" basedir="${build.classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}" />
                <!-- For a JAR to work with 'java -jar', the classpath needs to be in the manifest -->
                <attribute name="Class-Path" value="${ant.project.name}.jar lib/" />
            </manifest>
        </jar>
    </target>

    <!-- Target to run the application -->
    <target name="runApp" depends="jar" description="--> Executes the Spring Boot application">
        <java classname="${main.class}" fork="true">
            <classpath>
                <pathelement location="${jar.file}" />
                <path refid="compile.classpath" />
            </classpath>
        </java>
    </target>

    <target name="test" depends="test-compile" description="Run unit tests (JUnit 5)">
        <mkdir dir="${test.reports.dir}"/>
        <junitlauncher haltonfailure="true">
            <classpath refid="test.runtime.classpath"/>
            <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>
            <testclasses outputdir="${test.reports.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="${test.includes}"/>
                    <exclude name="${test.excludes}"/>
                </fileset>
            </testclasses>
        </junitlauncher>
    </target>
    
    <target name="integrationTest" depends="integrationTest-compile, test" description="Run unit tests (JUnit 5)">
        <mkdir dir="${integrationTest.reports.dir}"/>
        <junitlauncher haltonfailure="true">
            <classpath refid="integrationTest.runtime.classpath"/>
            <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>
            <testclasses outputdir="${integrationTest.reports.dir}">
                <fileset dir="${integrationTest.classes.dir}">
                    <include name="${integrationTest.includes}"/>
                    <exclude name="${integrationTest.excludes}"/>
                </fileset>
            </testclasses>
        </junitlauncher>
    </target>
    

    <!-- Target to generate Javadoc documentation -->
    <target name="javadoc" depends="compile" description="--> Generates Javadoc documentation">
        <javadoc destdir="${javadoc.dir}"
            author="true"
            version="true"
            use="true"
            windowtitle="${app.name} Javadoc"
            access="package"> <!-- Equivalent to JavadocMemberLevel.PACKAGE -->

            <sourcepath>
                <pathelement location="${src.dir}" />
            </sourcepath>
            <classpath refid="compile.classpath" />
        </javadoc>
    </target>

    <!-- Target to create a ZIP of the Javadoc documentation -->
    <target name="zipJavadoc" depends="javadoc"
        description="--> Compresses the Javadoc into a ZIP file">
        <zip destfile="${javadoc.zip.file}" basedir="${javadoc.dir}" />
        <echo message="Javadoc ZIP created at: ${javadoc.zip.file}" />
    </target>

    <!-- Custom deployment task: deployToDev -->
    <target name="deployToDev" depends="jar" description="--> Deploy the application to the dev deployment folder">
        <!-- 1) Clean deployment directory -->
        <delete dir="${deploy.dir}" />
        <mkdir dir="${deploy.dir}" />
        <mkdir dir="${deploy.lib.dir}" />

        <!-- 2) Copy main application artifact (JAR) -->
        <copy file="${jar.file}" todir="${deploy.dir}" />

        <!-- 3) Copy runtime dependencies (only JARs) into deployment lib folder -->
        <copy todir="${deploy.lib.dir}">
            <fileset dir="${lib.dir}/jars" includes="**/*.jar" erroronmissingdir="false" />
        </copy>

        <!-- Prepare a build timestamp property for token replacement -->
        <tstamp>
            <format property="build.timestamp" pattern="yyyy-MM-dd'T'HH:mm:ssZ" />
        </tstamp>

        <!-- 4) Copy configuration files with token replacement -->
        <copy todir="${deploy.dir}">
            <fileset dir="${resources.dir}" includes="**/*.properties" erroronmissingdir="false" />
            <filterchain>
                <replacetokens>
                    <token key="BUILD_VERSION" value="${app.version}" />
                    <token key="BUILD_TIMESTAMP" value="${build.timestamp}" />
                </replacetokens>
            </filterchain>
        </copy>

        <echo message="Deployment completed: ${deploy.dir}" />
    </target>

    <!-- Convenience alias to run the app with `ant run` -->
    <target name="run" depends="runApp" description="--> Alias for runApp" />

</project>